# Commands covered: GetGateway
#
# discord.test --
#
#       This file contains tests commands in the root discord namespace.
#       Sourcing this file into Tcl runs the tests and generates output for
#       errors. No output means no errors were found.
#
# Copyright (c) 2016, Yixin Zhang
#
# See the file "LICENSE" for information on usage and redistribution of this
# file.

package require tcltest
namespace import tcltest::*
verbose [list body error start usec]

# Add parent directory to auto_path to load the discord package.

set scriptDir [file dirname [info script]]
lappend ::auto_path "$scriptDir/../"
package require discord

# Suppress all logging.

${discord::log}::disable emergency

set testUrl "wss://discord.test"
set originalUrl $discord::ApiBaseUrlV6

test GetGateway-1.1 {Retrieve uncached URL, no cached URL} -body {
    discord::GetGateway 0
} -cleanup {
    set discord::GatewayUrl ""
} -match regexp -result {^wss://.+$} 

test GetGateway-1.2 {Retrieve cached URL, has cached URL} -setup {
    set discord::GatewayUrl $testUrl
} -body {
    discord::GetGateway
} -cleanup {
    set discord::GatewayUrl ""
} -result $testUrl

test GetGateway-1.3 {Retrieve uncached URL, has cached URL} -setup {
    set discord::GatewayUrl $testUrl
} -body {
    set url [discord::GetGateway 0]
    return [expr {$url ne $testUrl}]
} -cleanup {
    set discord::GatewayUrl ""
} -result 1

test GetGateway-1.4 {Retrieve cached URL, no cached URL} -body {
    discord::GetGateway
} -cleanup {
    set discord::GatewayUrl ""
} -match regexp -result {^wss://.+$}

test GetGateway-2.1 {Invalid base API URL} -setup {
    set discord::ApiBaseUrlV6 "tcl://discord.tcl"
} -body {
    if {[catch {discord::GetGateway} url options]} {
        return -options $options $url
    }
} -cleanup {
    set discord::GatewayUrl ""
    set discord::ApiBaseUrlV6 $originalUrl
} -returnCodes error -result {Unsupported URL type "tcl"}

test GetGateway-2.2 {HTTP status timeout} -setup {
    set clients [list]
    proc HandleClients { channel clientAddr clientPort } {
        lappend ::clients $channel
        chan configure $channel -blocking 0 -buffering none
        chan event $channel readable [list apply { { channel } {
                    if {![chan eof $channel]} {
                        chan gets $channel
                    }
                } } $channel]
    }
    set sock [socket -server HandleClients -myaddr localhost 0]
    lassign [chan configure $sock -sockname] address hostname port
    set discord::ApiBaseUrlV6 "http://${hostname}:$port"
} -body {
    if {[catch {discord::GetGateway 0 -timeout 1500} url options]} {
        return -options $options $url
    }
} -cleanup {
    set discord::ApiBaseUrlV6 $originalUrl
    foreach channel $clients {
        if {[llength [file channels $channel]] > 0} {
            chan close $channel
        }
    }
    chan close $sock
} -returnCodes error -result timeout

test GetGateway-2.3 {Connection refused} -setup {
    # Connect to a port that is not opened by binding to it ourselves and then
    # closing the socket.
    set sock [socket -server {} -myaddr localhost 0]
    lassign [chan configure $sock -sockname] address hostname port
    chan close $sock
    set discord::ApiBaseUrlV6 "http://${hostname}:$port"
} -body {
    if {[catch {discord::GetGateway 0} url options]} {
        return -options $options $url
    }
} -cleanup {
    set discord::ApiBaseUrlV6 $originalUrl
} -returnCodes error -result {connect failed connection refused}

test GetGateway-2.4 {HTTP base API URL instead of HTTPS} -setup {
    set discord::ApiBaseUrlV6 [regsub {^https} $discord::ApiBaseUrlV6 http]
} -body {
    discord::GetGateway
} -cleanup {
    set discord::GatewayUrl ""
    set discord::ApiBaseUrlV6 $originalUrl
} -returnCodes error -result 301

test GetGateway-2.5 {HTTP status eof} -setup {
    set sock [socket -server [list apply { { channel args } {
                chan puts $channel {}
                chan close $channel
            } }] -myaddr localhost 0]
    lassign [chan configure $sock -sockname] address hostname port
    set discord::ApiBaseUrlV6 "http://${hostname}:$port"
} -body {
    if {[catch {discord::GetGateway} url options]} {
        return -options $options $url
    }
} -cleanup {
    set discord::ApiBaseUrlV6 $originalUrl
    chan close $sock
} -returnCodes error -result eof

test GetGateway-2.6 {Invalid JSON payload} -setup {
    set sock [socket -server [list apply { { channel args } {
                chan configure $channel -blocking 0 -buffering full
                chan event $channel readable [list apply { { channel } {
                            chan read $channel
                            chan puts $channel [join {
                                        {HTTP/1.1 200 OK}
                                        {}
                                        {Not JSON}
                                    } "\r\n"]
                            chan close $channel
                        } } $channel]
            } }] -myaddr localhost 0]
    lassign [chan configure $sock -sockname] address hostname port
    set discord::ApiBaseUrlV6 "http://${hostname}:$port"
} -body {
    if {[catch {discord::GetGateway} url options]} {
        return -options $options $url
    }
} -cleanup {
    set discord::ApiBaseUrlV6 $originalUrl
    chan close $sock
} -returnCodes error \
    -result {unexpected token "END" at position 0; expecting VALUE}

test GetGateway-2.7 {JSON payload with no url field} -setup {
    set sock [socket -server [list apply { { channel args } {
                chan configure $channel -blocking 0 -buffering full
                chan event $channel readable [list apply { { channel } {
                            chan read $channel
                            chan puts $channel [join {
                                        {HTTP/1.1 200 OK}
                                        {}
                                        {{"notUrl" : 1}}
                                    } "\r\n"]
                            chan close $channel
                        } } $channel]
            } }] -myaddr localhost 0]
    lassign [chan configure $sock -sockname] address hostname port
    set discord::ApiBaseUrlV6 "http://${hostname}:$port"
} -body {
    if {[catch {discord::GetGateway} url options]} {
        return -options $options $url
    }
} -cleanup {
    set discord::ApiBaseUrlV6 $originalUrl
    chan close $sock
} -returnCodes error -result {key "url" not known in dictionary}
