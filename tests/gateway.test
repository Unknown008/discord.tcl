# Commands covered: GetGateway
#
# gateway.test --
#
#       This file contains tests for commands in the discord::gateway namespace.
#       Sourcing this file into Tcl runs the tests and generates output for
#       errors. No output means no errors were found.
#
# Copyright (c) 2016, Yixin Zhang
#
# See the file "LICENSE" for information on usage and redistribution of this
# file.

package require tcltest
namespace import tcltest::*

;# Uncomment the next line to show more verbose output.
;#verbose [list body error start usec]

set scriptDir [file dirname [info script]]

# Add parent directory to auto_path to load the discord package.

lappend ::auto_path "$scriptDir/../"
package require discord

set localServerScript "$scriptDir/local_server.tcl"
source $localServerScript

# Suppress all logging.

${discord::gateway::log}::disable emergency

set testUrl "wss://discord.test"

# outputVar will contain the local server URL.
proc StartLocalServer { outputVar {timeout {3000}} {protocol https} \
        {scripts {}} args } {
    variable localServerScript
    lassign [chan pipe] rdPipe wrPipe
    chan configure $rdPipe -blocking 0 -buffering line
    chan event $rdPipe readable [list apply { { outputVar rdPipe wrPipe } {
                if {![chan eof $rdPipe]} {
                    upvar #0 $outputVar output
                    set output [chan gets $rdPipe]
                }
                chan close $rdPipe
                chan close $wrPipe
            } } $outputVar $rdPipe $wrPipe]
    exec {*}[auto_execok tclsh] $localServerScript $timeout $protocol {} \
            $scripts $args >@ $wrPipe &
}

test GetGateway-1.1 {Retrieve uncached URL, no cached URL} -setup {
    set writeScript [list apply { {url channel } {
                chan puts $channel [join [list \
                        "HTTP/1.1 200 OK" \
                        "" \
                        "\{\"url\":\"$url\"\}"] "\r\n"]
                chan close $channel
            } } $testUrl]
    set scripts [list {} $writeScript]
    set baseUrl ""
    StartLocalServer baseUrl 1000 https $scripts -blocking 0 -buffering full
    vwait baseUrl
} -body {
    ::discord::gateway::GetGateway $baseUrl 0
} -cleanup {
    set discord::gateway::CachedGatewayUrls [dict create]
} -result $testUrl

test GetGateway-1.2 {Retrieve cached URL, has cached URL} -setup {
    dict set discord::gateway::CachedGatewayUrls $discord::ApiBaseUrl $testUrl
} -body {
    discord::gateway::GetGateway $discord::ApiBaseUrl
} -cleanup {
    set discord::gateway::CachedGatewayUrls [dict create]
} -result $testUrl

test GetGateway-1.3 {Retrieve uncached URL, has cached URL} -setup {
    dict set discord::gateway::CachedGatewayUrls $discord::ApiBaseUrl $testUrl
} -body {
    set url [discord::gateway::GetGateway $discord::ApiBaseUrl 0]
    return [expr {$url ne $testUrl}]
} -cleanup {
    set discord::gateway::CachedGatewayUrls [dict create]
} -result 1

test GetGateway-1.4 {Retrieve cached URL, no cached URL} -setup {
    set writeScript [list apply { {url channel } {
                chan puts $channel [join [list \
                        "HTTP/1.1 200 OK" \
                        "" \
                        "\{\"url\":\"$url\"\}"] "\r\n"]
                chan close $channel
            } } $testUrl]
    set scripts [list {} $writeScript]
    set baseUrl ""
    StartLocalServer baseUrl 1000 https $scripts -blocking 0 -buffering full
    vwait baseUrl
} -body {
    discord::gateway::GetGateway $baseUrl
} -cleanup {
    set discord::gateway::CachedGatewayUrls [dict create]
} -match regexp -result $testUrl

test GetGateway-2.1 {Unsupported base API URL type} -body {
    discord::gateway::GetGateway "tcl://discord.tcl"
} -cleanup {
    set discord::gateway::CachedGatewayUrls [dict create]
} -returnCodes error -result {Unsupported URL type "tcl"}

test GetGateway-2.2 {HTTP status timeout} -setup {
    set clients [list]
    proc HandleClients { channel clientAddr clientPort } {
        lappend ::clients $channel
        chan configure $channel -blocking 0 -buffering none
        chan event $channel readable [list apply { { channel } {
                    if {![chan eof $channel]} {
                        chan gets $channel
                    }
                } } $channel]
    }
    set sock [socket -server HandleClients -myaddr localhost 0]
    lassign [chan configure $sock -sockname] address hostname port
} -body {
    discord::gateway::GetGateway "http://$hostname:$port" 0 -timeout 1500
} -cleanup {
    foreach channel $clients {
        if {[llength [file channels $channel]] > 0} {
            chan close $channel
        }
    }
    chan close $sock
} -returnCodes error -result timeout

test GetGateway-2.3 {Connection refused} -setup {
    # Connect to a port that is not opened by binding to it ourselves and then
    # closing the socket.
    set sock [socket -server {} -myaddr localhost 0]
    lassign [chan configure $sock -sockname] address hostname port
    chan close $sock
} -body {
    discord::gateway::GetGateway "http://$hostname:$port" 0
} -cleanup {
} -returnCodes error -result {connect failed connection refused}

test GetGateway-2.4 {HTTP base API URL instead of HTTPS} -body {
    discord::gateway::GetGateway [regsub {^https} $discord::ApiBaseUrl http]
} -cleanup {
    set discord::gateway::CachedGatewayUrls [dict create]
} -returnCodes error -result 301

test GetGateway-2.5 {HTTP status eof} -setup {
    set sock [socket -server [list apply { { channel args } {
                chan puts $channel {}
                chan close $channel
            } }] -myaddr localhost 0]
    lassign [chan configure $sock -sockname] address hostname port
} -body {
    discord::gateway::GetGateway "http://$hostname:$port"
} -cleanup {
    chan close $sock
} -returnCodes error -result eof

test GetGateway-2.6 {Invalid JSON payload} -setup {
    set sock [socket -server [list apply { { channel args } {
                chan configure $channel -blocking 0 -buffering full
                chan event $channel readable [list apply { { channel } {
                            chan read $channel
                            chan puts $channel [join {
                                        {HTTP/1.1 200 OK}
                                        {}
                                        {Not JSON}
                                    } "\r\n"]
                            chan close $channel
                        } } $channel]
            } }] -myaddr localhost 0]
    lassign [chan configure $sock -sockname] address hostname port
} -body {
    discord::gateway::GetGateway "http://$hostname:$port"
} -cleanup {
    chan close $sock
} -returnCodes error \
    -result {unexpected token "END" at position 0; expecting VALUE}

test GetGateway-2.7 {JSON payload with no url field} -setup {
    set sock [socket -server [list apply { { channel args } {
                chan configure $channel -blocking 0 -buffering full
                chan event $channel readable [list apply { { channel } {
                            chan read $channel
                            chan puts $channel [join {
                                        {HTTP/1.1 200 OK}
                                        {}
                                        {{"notUrl" : 1}}
                                    } "\r\n"]
                            chan close $channel
                        } } $channel]
            } }] -myaddr localhost 0]
    lassign [chan configure $sock -sockname] address hostname port
} -body {
    discord::gateway::GetGateway "http://$hostname:$port"
} -cleanup {
    chan close $sock
} -returnCodes error -result {"url" field not found in JSON object.}
